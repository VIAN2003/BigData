# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import io
import os
import re
import openpyxl
import numpy as np
import pandas as pd
import streamlit as st
from minio import Minio
from minio.error import S3Error
from pyspark.sql import SparkSession
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from pyspark.sql.functions import col, count, when, mean


# H√†m ki·ªÉm tra k·∫øt n·ªëi MinIO
def check_minio_connection():
    try:
        # Kh·ªüi t·∫°o Minio client
        minio_client = Minio(
            "192.168.0.101:9000",
            access_key="admin",    
            secret_key="password", 
            secure=False
        )

        # Ki·ªÉm tra k·∫øt n·ªëi b·∫±ng c√°ch li·ªát k√™ c√°c bucket
        buckets = minio_client.list_buckets()
        return True, minio_client, buckets  # Tr·∫£ v·ªÅ client v√† buckets

    except S3Error as err:
        return False, str(err), None  # Tr·∫£ v·ªÅ l·ªói nh∆∞ m·ªôt chu·ªói



# B∆∞·ªõc 1: Kh·ªüi t·∫°o Spark session
spark = SparkSession.builder \
    .appName("Titanic Data Analysis") \
    .master("local[*]") \
    .getOrCreate()

# B∆∞·ªõc 2: ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV
df = spark.read.csv("titanic.csv", header=True, inferSchema=True)

# Thay ƒë·ªïi giao di·ªán
st.markdown(
    """
    <style>
        body {
            background-color: #f0f2f5;
        }
        .st-emotion-cache-vmpjyt {
            background-color: #9E9E9E;
        }
        .st-emotion-cache-1ny7cjd {
            display: inline-flex;
            -webkit-box-align: center;
            align-items: center;
            -webkit-box-pack: center;
            justify-content: center;
            font-weight: 400;
            padding: 0.25rem 0.75rem;
            border-radius: 0.5rem;
            min-height: 2.5rem;
            margin: 0px;
            line-height: 1.6;
            color: inherit;
            width: auto;
            user-select: none;
            background-color: #e7ff95;
            border: 1px solid rgb(255 255 255 / 20%);
            flex-direction: row;
        }
        element.style {
            background: darkseagreen;
            padding-bottom: inherit;
            display: inline-block;
            padding-top: inherit;
        }
        .title {
            background-color: #4caf50; /* M√†u n·ªÅn xanh l√° cho ti√™u ƒë·ªÅ ch√≠nh */
            color: white; /* M√†u ch·ªØ cho ti√™u ƒë·ªÅ ch√≠nh */
            font-size: 2.5em;
            font-weight: bold;
            padding: 10px; /* Kho·∫£ng c√°ch cho ti√™u ƒë·ªÅ */
            border-radius: 10px; /* Bo g√≥c cho ti√™u ƒë·ªÅ */
            display: inline-block; /* ƒê·ªÉ n·ªÅn √¥m s√°t ch·ªØ */
            margin-bottom: 20px;
        }
        .subheader {
            background-color: #8B8378; /* M√†u n·ªÅn cho ti√™u ƒë·ªÅ ph·ª• */
            color: white; /* M√†u ch·ªØ cho ti√™u ƒë·ªÅ ph·ª• */
            font-size: 1.5em;
            font-weight: bold;
            padding: 10px; /* Kho·∫£ng c√°ch cho ti√™u ƒë·ªÅ ph·ª• */
            border-radius: 10px; /* Bo g√≥c cho ti√™u ƒë·ªÅ ph·ª• */
            display: inline-block; /* ƒê·ªÉ n·ªÅn √¥m s√°t ch·ªØ */
            margin-bottom: 20px;
        }
        h1, h2 {
            color: white; /* M√†u ch·ªØ cho ti√™u ƒë·ªÅ */
            padding: 10px; /* Kho·∫£ng c√°ch cho ti√™u ƒë·ªÅ */
            border-radius: 10px; /* Bo g√≥c cho ti√™u ƒë·ªÅ */
            margin-bottom: 20px;
        }
        .streamlit-expanderHeader {
            background-color: #4caf50; /* M√†u n·ªÅn xanh l√° cho sidebar */
            color: white; /* M√†u ch·ªØ cho sidebar */
        }
        .css-1g5y6g3 {
            background-color: #4caf50; /* M√†u n·ªÅn cho sidebar */
            color: white; /* M√†u ch·ªØ cho sidebar */
        }
        .st-emotion-cache-1gwvy71 h2 {
            background-color: #4caf50 !important; 
            padding: 10px;
            border-radius: 10px;
            margin-bottom: 20px;
            display: inline-block;
        }

    </style>
    """,
    unsafe_allow_html=True
)

# Hi·ªÉn th·ªã ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.markdown("<h1 class='title'>üö¢ Ph√¢n T√≠ch D·ªØ Li·ªáu Titanic</h1>", unsafe_allow_html=True)

# Hi·ªÉn th·ªã d·ªØ li·ªáu ban ƒë·∫ßu
st.markdown("<h2 class='subheader'>D·ªØ li·ªáu ban ƒë·∫ßu:</h2>", unsafe_allow_html=True)
st.write(df.toPandas().head())  # Hi·ªÉn th·ªã d·ªØ li·ªáu tr√™n Streamlit

# T·∫°o kh√¥ng gian ngƒÉn c√°ch
st.markdown("<hr>", unsafe_allow_html=True)

# B∆∞·ªõc 3: X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu
st.markdown("<h2 class='subheader'>D·ªØ li·ªáu thi·∫øu:</h2>", unsafe_allow_html=True)
missing_data = df.select([count(when(col(c).isNull(), c)).alias(c) for c in df.columns]).toPandas()
st.write(missing_data)

st.markdown("<hr>", unsafe_allow_html=True)

mean_age = df.select(mean(col("Age"))).collect()[0][0]
df = df.na.fill({"Age": mean_age})
df = df.na.drop(subset=["Embarked"])
df = df.na.drop(subset=["Cabin"])

st.markdown("<h2 class='subheader'>Sau khi x·ª≠ l√Ω:</h2>", unsafe_allow_html=True)
missing_values_after = df.select([count(when(col(c).isNull(), c)).alias(c) for c in df.columns]).toPandas()

st.write(missing_values_after)

st.markdown("<hr>", unsafe_allow_html=True)


# B∆∞·ªõc 4: T·∫°o Sidebar cho truy xu·∫•t d·ªØ li·ªáu
st.sidebar.header("T√πy ch·ªçn ph√¢n t√≠ch")
option = st.sidebar.selectbox(
    "Ch·ªçn lo·∫°i ph√¢n t√≠ch th·ª±c hi·ªán:",
    ("T·ª∑ l·ªá s·ªëng s√≥t t·ªïng quan", 
     "Ph√¢n t√≠ch s·ªëng s√≥t theo gi·ªõi t√≠nh", 
     "Ph√¢n t√≠ch s·ªëng s√≥t theo h·∫°ng v√©", 
     "D·ª± ƒëo√°n s·ªëng s√≥t"),
    index=None,
    placeholder="Lo·∫°i ph√¢n t√≠ch"
)


# ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c l∆∞u tr·ªØ h√¨nh ·∫£nh
image_folder = "images"
if not os.path.exists(image_folder):
    os.makedirs(image_folder)

# B∆∞·ªõc 5: Ph√¢n t√≠ch d·ªØ li·ªáu d·ª±a tr√™n l·ª±a ch·ªçn
if option == "T·ª∑ l·ªá s·ªëng s√≥t t·ªïng quan":
    survival_rate = df.groupBy("Survived").count().toPandas()
    st.markdown("<h2 class='subheader'>T·ª∑ l·ªá s·ªëng s√≥t:</h2>", unsafe_allow_html=True)
    st.write(survival_rate)

    total_passengers = survival_rate['count'].sum()
    survived_count = survival_rate[survival_rate['Survived'] == 1]['count'].values[0]
    survival_percentage = (survived_count / total_passengers) * 100

    st.markdown(f"<p><strong>T·ªïng s·ªë h√†nh kh√°ch:</strong> {total_passengers}</p>", unsafe_allow_html=True)
    st.markdown(f"<p><strong>T·ª∑ l·ªá s·ªëng s√≥t:</strong> {survival_percentage:.2f}%</p>", unsafe_allow_html=True)

    survived_count = df.toPandas().groupby('Survived').size()
    st.markdown("<h2 class='subheader'>Bi·ªÉu ƒë·ªì t·ª∑ l·ªá s·ªëng s√≥t:</h2>", unsafe_allow_html=True)
    chart = survived_count.plot(kind='bar')  # G√°n bi·ªÉu ƒë·ªì v√†o bi·∫øn chart
    st.pyplot(chart.get_figure())  # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit

    # L∆∞u bi·ªÉu ƒë·ªì
    if st.button("L∆∞u bi·ªÉu ƒë·ªì"):
        image_path = os.path.join(image_folder, "ty_le_song_tot_tong_quan.png")
        chart.get_figure().savefig(image_path, format="png")
        st.success(f"Bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c l∆∞u: {image_path}")

    # Nh·∫≠n x√©t
    st.markdown("""
    <p><strong>Nh·∫≠n x√©t:</strong> 
                <p>T·ª∑ l·ªá s·ªëng s√≥t t·ªïng quan cho th·∫•y ch·ªâ c√≥ 38.25% h√†nh kh√°ch s·ªëng s√≥t sau th·∫£m h·ªça, cho th·∫•y s·ª± t√†n kh·ªëc c·ªßa t√¨nh hu·ªëng.</p> S·ªë l∆∞·ª£ng h√†nh kh√°ch kh√¥ng qua kh·ªèi (kho·∫£ng 61.75%) ph·∫£n √°nh nh·ªØng th√°ch th·ª©c l·ªõn m√† h·ªç ph·∫£i ƒë·ªëi m·∫∑t trong t√¨nh hu·ªëng kh·∫©n c·∫•p.</p>
    """, unsafe_allow_html=True)

    st.markdown("<hr>", unsafe_allow_html=True)

elif option == "Ph√¢n t√≠ch s·ªëng s√≥t theo gi·ªõi t√≠nh":
    sex_survival = df.groupBy("Sex", "Survived").count().toPandas()
    st.markdown("<h2 class='subheader'>Ph√¢n t√≠ch s·ªëng s√≥t theo gi·ªõi t√≠nh:</h2>", unsafe_allow_html=True)
    st.write(sex_survival)

    total_males = sex_survival[sex_survival['Sex'] == 'male']['count'].values[0]
    total_females = sex_survival[sex_survival['Sex'] == 'female']['count'].values[0]
    survived_males = sex_survival[(sex_survival['Sex'] == 'male') & (sex_survival['Survived'] == 1)]['count'].values[0]
    survived_females = sex_survival[(sex_survival['Sex'] == 'female') & (sex_survival['Survived'] == 1)]['count'].values[0]

    male_survival_rate = (survived_males / total_males) * 100
    female_survival_rate = (survived_females / total_females) * 100

    st.markdown(f"<p><strong>T·ª∑ l·ªá s·ªëng s√≥t c·ªßa nam:</strong> {male_survival_rate:.2f}%</p>", unsafe_allow_html=True)
    st.markdown(f"<p><strong>T·ª∑ l·ªá s·ªëng s√≥t c·ªßa n·ªØ:</strong> {female_survival_rate:.2f}%</p>", unsafe_allow_html=True)

    sex_survived_count = df.toPandas().groupby(['Sex', 'Survived']).size().unstack()
    st.markdown("<h2 class='subheader'>Bi·ªÉu ƒë·ªì s·ªëng s√≥t theo gi·ªõi t√≠nh:</h2>", unsafe_allow_html=True)
    chart = sex_survived_count.plot(kind='bar')
    st.pyplot(chart.get_figure())

    # L∆∞u bi·ªÉu ƒë·ªì
    if st.button("L∆∞u bi·ªÉu ƒë·ªì"):
        image_path = os.path.join(image_folder, "ty_le_song_tot_theo_gioi_tinh.png")
        chart.get_figure().savefig(image_path, format="png")
        st.success(f"Bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c l∆∞u: {image_path}")

# Nh·∫≠n x√©t
    st.markdown("""
    <p><strong>Nh·∫≠n x√©t:</strong> 
                <p>Ph√¢n t√≠ch cho th·∫•y t·ª∑ l·ªá s·ªëng s√≥t c·ªßa nam l√† 23.29%, trong khi n·ªØ ƒë·∫°t 100%.</p> ƒêi·ªÅu n√†y ch·ªâ ra r·∫±ng n·ªØ h√†nh kh√°ch c√≥ kh·∫£ nƒÉng s·ªëng s√≥t cao h∆°n r·∫•t nhi·ªÅu so v·ªõi nam gi·ªõi, c√≥ th·ªÉ ph·∫£n √°nh c√°c y·∫øu t·ªë nh∆∞ ch√≠nh s√°ch c·ª©u h·ªô ∆∞u ti√™n ph·ª• n·ªØ v√† tr·∫ª em trong t√¨nh hu·ªëng kh·∫©n c·∫•p.</p>""", unsafe_allow_html=True)

    st.markdown("<hr>", unsafe_allow_html=True)

elif option == "Ph√¢n t√≠ch s·ªëng s√≥t theo h·∫°ng v√©":
    pclass_survival = df.groupBy("Pclass", "Survived").count().toPandas()
    st.markdown("<h2 class='subheader'>Ph√¢n t√≠ch s·ªëng s√≥t theo h·∫°ng v√©:</h2>", unsafe_allow_html=True)
    # st.write(pclass_survival)

    # Nh√≥m theo Pclass v√† Survived, sau ƒë√≥ ƒë·∫øm s·ªë l∆∞·ª£ng
    pclass_survival1 = df.groupBy("Pclass", "Survived").count().toPandas()

    # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh ƒë·ªãnh d·∫°ng d·ªÖ ƒë·ªçc h∆°n
    pclass_survival1 = pclass_survival1.pivot(index='Pclass', columns='Survived', values='count').fillna(0)
    
    # ƒê·ªïi t√™n c·ªôt ƒë·ªÉ d·ªÖ hi·ªÉu h∆°n
    pclass_survival1.columns = ['Kh√¥ng s·ªëng s√≥t', 'S·ªëng s√≥t']

    # T√≠nh t·ªïng s·ªë h√†nh kh√°ch cho m·ªói h·∫°ng v√©
    pclass_survival1['T·ªïng c·ªông'] = pclass_survival1['S·ªëng s√≥t'] + pclass_survival1['Kh√¥ng s·ªëng s√≥t']

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    st.write(pclass_survival1)

    # L·∫•y s·ªë l∆∞·ª£ng h√†nh kh√°ch s·ªëng s√≥t v√† t·ªïng s·ªë h√†nh kh√°ch theo h·∫°ng
    total_pclass1 = pclass_survival[pclass_survival['Pclass'] == 1]['count'].values.sum()
    total_pclass2 = pclass_survival[pclass_survival['Pclass'] == 2]['count'].values.sum()
    total_pclass3 = pclass_survival[pclass_survival['Pclass'] == 3]['count'].values.sum()
    
    survived_pclass1 = pclass_survival[(pclass_survival['Pclass'] == 1) & (pclass_survival['Survived'] == 1)]['count'].values.sum()
    survived_pclass2 = pclass_survival[(pclass_survival['Pclass'] == 2) & (pclass_survival['Survived'] == 1)]['count'].values.sum()
    survived_pclass3 = pclass_survival[(pclass_survival['Pclass'] == 3) & (pclass_survival['Survived'] == 1)]['count'].values.sum()

    # T√≠nh t·ª∑ l·ªá s·ªëng s√≥t
    pclass1_survival_rate = (survived_pclass1 / total_pclass1) * 100 if total_pclass1 > 0 else 0
    pclass2_survival_rate = (survived_pclass2 / total_pclass2) * 100 if total_pclass2 > 0 else 0
    pclass3_survival_rate = (survived_pclass3 / total_pclass3) * 100 if total_pclass3 > 0 else 0

    st.markdown(f"<p><strong>T·ª∑ l·ªá s·ªëng s√≥t h·∫°ng 1:</strong> {pclass1_survival_rate:.2f}%</p>", unsafe_allow_html=True)
    st.markdown(f"<p><strong>T·ª∑ l·ªá s·ªëng s√≥t h·∫°ng 2:</strong> {pclass2_survival_rate:.2f}%</p>", unsafe_allow_html=True)
    st.markdown(f"<p><strong>T·ª∑ l·ªá s·ªëng s√≥t h·∫°ng 3:</strong> {pclass3_survival_rate:.2f}%</p>", unsafe_allow_html=True)

    pclass_survived_count = df.toPandas().groupby(['Pclass', 'Survived']).size().unstack()
    st.markdown("<h2 class='subheader'>Bi·ªÉu ƒë·ªì s·ªëng s√≥t theo h·∫°ng v√©:</h2>", unsafe_allow_html=True)
    chart = pclass_survived_count.plot(kind='bar')
    st.pyplot(chart.get_figure())

    # L∆∞u bi·ªÉu ƒë·ªì
    if st.button("L∆∞u bi·ªÉu ƒë·ªì"):
        image_path = os.path.join(image_folder, "ty_le_song_tot_theo_hang_ve.png")
        chart.get_figure().savefig(image_path, format="png")
        st.success(f"Bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c l∆∞u: {image_path}")

    #Nh·∫≠n x√©t
    st.markdown("""
    <p><strong>Nh·∫≠n x√©t:</strong> 
                <p>Ph√¢n t√≠ch cho th·∫•y t·ª∑ l·ªá s·ªëng s√≥t ·ªü h·∫°ng 1 l√† 62.62%, h·∫°ng 2 l√† 47.28%, v√† h·∫°ng 3 ch·ªâ ƒë·∫°t 24.24%.</p> S·ª± ch√™nh l·ªách n√†y cho th·∫•y r·∫±ng h√†nh kh√°ch ·ªü c√°c h·∫°ng v√© cao h∆°n c√≥ kh·∫£ nƒÉng s·ªëng s√≥t t·ªët h∆°n, c√≥ th·ªÉ do v·ªã tr√≠ ng·ªìi g·∫ßn l·ªëi tho√°t hi·ªÉm v√† ∆∞u ti√™n trong qu√° tr√¨nh c·ª©u h·ªô.</p>""", unsafe_allow_html=True)

    st.markdown("<hr>", unsafe_allow_html=True)

elif option == "D·ª± ƒëo√°n s·ªëng s√≥t":
    st.markdown("<h2 class='subheader'>D·ª± ƒëo√°n kh·∫£ nƒÉng s·ªëng s√≥t</h2>", unsafe_allow_html=True)
    
    # Ch·ªçn c√°c ƒë·∫∑c ƒëi·ªÉm ƒë·ªÉ d·ª± ƒëo√°n
    st.markdown("**Nh·∫≠p c√°c th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë·ªÉ d·ª± ƒëo√°n kh·∫£ nƒÉng s·ªëng s√≥t:**")
    
    pclass = st.selectbox("H·∫°ng v√©:", (1, 2, 3))
    sex = st.selectbox("Gi·ªõi t√≠nh:", ("male", "female"))
    age = st.number_input("Tu·ªïi:", min_value=0, max_value=100, value=30)
    sibsp = st.number_input("S·ªë l∆∞·ª£ng anh ch·ªã em/ch·ªìng/v·ª£ ƒëi c√πng:", min_value=0, max_value=8, value=0)
    parch = st.number_input("S·ªë l∆∞·ª£ng cha m·∫π/con c√°i ƒëi c√πng:", min_value=0, max_value=6, value=0)

    # Chuy·ªÉn ƒë·ªïi gi·ªõi t√≠nh th√†nh s·ªë
    sex_encoded = 1 if sex == "female" else 0

    # T·∫°o DataFrame cho ƒë·∫ßu v√†o
    input_data = pd.DataFrame({
        "Pclass": [pclass],
        "Sex": [sex_encoded],
        "Age": [age],
        "SibSp": [sibsp],
        "Parch": [parch]
    })

    # Th√™m t√πy ch·ªçn thu·∫≠t to√°n
    algorithm = st.selectbox("Ch·ªçn thu·∫≠t to√°n:", ("Logistic Regression", "Decision Tree", "Random Forest"))

    # B∆∞·ªõc 6: Hu·∫•n luy·ªán m√¥ h√¨nh
    feature_cols = ["Pclass", "Sex", "Age", "SibSp", "Parch"]
    df_pd = df.toPandas()
    df_pd["Sex"] = df_pd["Sex"].map({"male": 0, "female": 1})

    X = df_pd[feature_cols]
    y = df_pd["Survived"]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    if algorithm == "Logistic Regression":
        model = LogisticRegression()
    elif algorithm == "Decision Tree":
        model = DecisionTreeClassifier()
    elif algorithm == "Random Forest":
        model = RandomForestClassifier()

    model.fit(X_train, y_train)

    # D·ª± ƒëo√°n
    prediction = model.predict(input_data)
    probability = model.predict_proba(input_data)

    # Kh·ªüi t·∫°o file Excel
    results_file = "KetQua\\results.xlsx"
    if not os.path.exists(results_file):
        df_results = pd.DataFrame(columns=["pclass", "sex", "age", "sibsp", "parch", "algorithm", "prediction", "probability"])
        df_results.to_excel(results_file, index=False)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
    if st.button("D·ª± ƒëo√°n"):
        st.success("Kh·∫£ nƒÉng s·ªëng s√≥t: **{:.2f}%**".format(probability[0][1] * 100))
        if prediction[0] == 1:
            st.success("B·∫°n c√≥ kh·∫£ nƒÉng s·ªëng s√≥t! üéâ")
        else:
            st.error("B·∫°n kh√¥ng c√≥ kh·∫£ nƒÉng s·ªëng s√≥t. üòî")

    is_saved = False
    # N√∫t l∆∞u d·ª± ƒëo√°n
    if st.button("L∆∞u d·ª± ƒëo√°n"):
        # L∆∞u th√¥ng tin d·ª± ƒëo√°n v√†o file Excel
        data = {
            "pclass": [pclass],
            "sex": [sex],
            "age": [age],
            "sibsp": [sibsp],
            "parch": [parch],
            "algorithm": [algorithm],
            "prediction": [prediction[0]],
            "probability": [probability[0][1]]
        }
        df_new_result = pd.DataFrame(data)
        df_results = pd.read_excel(results_file)
        df_results = pd.concat([df_results, df_new_result], ignore_index=True)
        df_results.to_excel(results_file, index=False)
        st.success("Th√¥ng tin d·ª± ƒëo√°n ƒë√£ ƒë∆∞·ª£c l∆∞u.") 
        is_saved = True
    
      # Hi·ªÉn th·ªã th√¥ng b√°o
    if is_saved:
        st.success("Th√¥ng tin d·ª± ƒëo√°n ƒë√£ ƒë∆∞·ª£c l∆∞u.")


st.sidebar.header("H√¨nh ·∫£nh ƒë√£ l∆∞u")
images = os.listdir(image_folder)
selected_image = st.sidebar.selectbox("Ch·ªçn h√¨nh ·∫£nh:", images,  index=None, placeholder="Xem ·∫£nh")

if selected_image:
    st.image(os.path.join(image_folder, selected_image))


# H√†m ki·ªÉm tra t√™n bucket h·ª£p l·ªá
def is_valid_bucket_name(name):
    # Ki·ªÉm tra t√™n bucket theo quy t·∫Øc c·ªßa MinIO
    return bool(re.match(r'^[a-z0-9\-]{3,63}$', name))  # Ch·ªâ cho ph√©p ch·ªØ th∆∞·ªùng, s·ªë, v√† d·∫•u -

# Giao di·ªán Streamlit
st.sidebar.title("MinIO Upload Tool")

# Bi·∫øn tr·∫°ng th√°i
if 'upload_disabled' not in st.session_state:
    st.session_state.upload_disabled = True

if 'minio_client' not in st.session_state:
    st.session_state.minio_client = None

if 'buckets' not in st.session_state:
    st.session_state.buckets = []

if 'selected_bucket' not in st.session_state:
    st.session_state.selected_bucket = None  # L∆∞u bucket hi·ªán t·∫°i

# T·∫°o button ki·ªÉm tra k·∫øt n·ªëi
if st.sidebar.button("K·∫øt n·ªëi MinIO"):
    success, result, buckets = check_minio_connection()
    if success:
        st.sidebar.success("K·∫øt n·ªëi th√†nh c√¥ng!")
        st.session_state.minio_client = result
        st.session_state.buckets = [bucket.name for bucket in buckets]  # Ch·ªâ l∆∞u t√™n bucket
        st.session_state.upload_disabled = False
    else:
        st.sidebar.error(f"K·∫øt n·ªëi th·∫•t b·∫°i: {result}")
        st.session_state.upload_disabled = True

# N·∫øu k·∫øt n·ªëi th√†nh c√¥ng, hi·ªán th·ªã c√°c n√∫t kh√°c
if not st.session_state.upload_disabled:
    # T·∫°o danh s√°ch bucket c√≥ s·∫µn
    bucket_names = st.session_state.buckets.copy()  # Sao ch√©p danh s√°ch bucket
    bucket_names.append("T·∫°o bucket m·ªõi")  # Th√™m t√πy ch·ªçn "T·∫°o bucket m·ªõi"

    # Ch·ªçn bucket t·ª´ danh s√°ch
    st.session_state.selected_bucket = st.sidebar.selectbox("Ch·ªçn bucket ƒë·ªÉ t·∫£i l√™n", bucket_names)

    # Tr∆∞·ªùng nh·∫≠p t√™n bucket m·ªõi n·∫øu "T·∫°o bucket m·ªõi" ƒë∆∞·ª£c ch·ªçn
    if st.session_state.selected_bucket == "T·∫°o bucket m·ªõi":
        new_bucket_name = st.sidebar.text_input("Nh·∫≠p t√™n bucket m·ªõi:")
        
        if st.sidebar.button("T·∫°o bucket"):  # N√∫t t·∫°o bucket n·∫±m trong ƒëi·ªÅu ki·ªán n√†y
            if new_bucket_name:
                if is_valid_bucket_name(new_bucket_name):
                    try:
                        minio_client = st.session_state.minio_client
                        minio_client.make_bucket(new_bucket_name)
                        st.sidebar.success(f"Bucket '{new_bucket_name}' ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")

                        # C·∫≠p nh·∫≠t danh s√°ch bucket
                        st.session_state.buckets.append(new_bucket_name)  # L∆∞u t√™n bucket m·ªõi
                        # C·∫≠p nh·∫≠t l·∫°i selectbox
                        st.session_state.selected_bucket = new_bucket_name  # C·∫≠p nh·∫≠t bucket ƒë√£ ch·ªçn
                    except S3Error as err:
                        st.sidebar.error(f"L·ªói t·∫°o bucket: {err}")
                else:
                    st.sidebar.warning("T√™n bucket kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p t√™n ch·ªâ ch·ª©a ch·ªØ th∆∞·ªùng, s·ªë v√† d·∫•u '-' (t·ª´ 3-63 k√Ω t·ª±).")
            else:
                st.sidebar.warning("Vui l√≤ng nh·∫≠p t√™n bucket m·ªõi.")

    # N√∫t t·∫£i file l√™n
    uploaded_files = st.sidebar.file_uploader("Ch·ªçn file ƒë·ªÉ t·∫£i l√™n", accept_multiple_files=True, disabled=st.session_state.upload_disabled)

    if uploaded_files:  # Ki·ªÉm tra n·∫øu c√≥ t·ªáp ƒë√£ ƒë∆∞·ª£c ch·ªçn
        for uploaded_file in uploaded_files:
            if st.sidebar.button(f"T·∫£i l√™n {uploaded_file.name}", disabled=st.session_state.upload_disabled):
                try:
                    minio_client = st.session_state.minio_client
                    target_bucket = st.session_state.selected_bucket  # S·ª≠ d·ª•ng bucket ƒë√£ ch·ªçn

                    if not target_bucket or target_bucket == "T·∫°o bucket m·ªõi":
                        st.sidebar.error("Vui l√≤ng ch·ªçn m·ªôt bucket h·ª£p l·ªá ƒë·ªÉ t·∫£i l√™n.")
                    else:
                        minio_client.put_object(target_bucket, uploaded_file.name, uploaded_file, uploaded_file.size)
                        st.sidebar.success(f"T·∫£i l√™n th√†nh c√¥ng: {uploaded_file.name}")
                except S3Error as err:
                    st.sidebar.error(f"L·ªói t·∫£i l√™n: {err}")

# ƒê·∫£m b·∫£o n√∫t t·∫£i l√™n b·ªã kh√≥a khi ch∆∞a k·∫øt n·ªëi
if st.session_state.upload_disabled:
    st.sidebar.button("T·∫£i l√™n", disabled=True)

# K·∫øt th√∫c Spark session
spark.stop()
